# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Bp4ifvxBgOgLMYcfZcE9N8y162JX5l7
"""

# -*- coding: utf-8 -*-
"""
Created on Wed May 19 16:29:17 2021

@author: Dear User
"""
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OrdinalEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import plot_confusion_matrix ,classification_report ,confusion_matrix  , accuracy_score
from sklearn import tree
import graphviz
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from mlxtend.plotting import plot_decision_regions
import matplotlib.gridspec as gridspec


#%%
path = "/content/Data_3_1.csv"
data1 = "/content/Data_3_1.csv"

df1 = pd.read_csv(data1 , header=None).replace("5more", "more")
df1.columns = ["buying", "maint", "doors", "persons", "lug_boot", "safety" , "decision"]

#question1
X , y = df1.drop(columns=["decision"],axis = 1) , df1["decision"]


#question2
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=42)

#%%

#question3
print(X_train.dtypes)

for i in range(len(X_train.columns)):
    print(X_train[X_train.columns[i]].unique())

  
encoder = OrdinalEncoder()
encoder.fit(X_train)
X_train = encoder.transform(X_train)
X_test = encoder.transform(X_test)


print(" ------------------------------------------------------------- ")

#question4
#%%
clf = DecisionTreeClassifier(criterion="entropy")
clf.fit(X_train , y_train)

#predict the trin
pred_train = clf.predict(X_train)
print("accuracy score for train data is : " + str(accuracy_score(y_train , pred_train)))
print("\n")
print(confusion_matrix(y_train , pred_train))
print(classification_report(y_train, pred_train))

print(" ------------------------------------------------------------- ")

#predict the test
pred_test = clf.predict(X_test)
print(confusion_matrix(y_test , pred_test))
print(classification_report(y_test, pred_test))

#%%
dot_graph = tree.export_graphviz(clf,
                    feature_names = df1.columns[:6], 
                    class_names=y.unique(),
                    filled = True)
graph = graphviz.Source(dot_graph , format="png")
graph.render("tree2")

len(X_train[X_train[:,0]<= 2.5])

#question5
data2 = "/content/Data_3_2.csv"
df2 = pd.read_csv(data2)

zero = df2[df2["label"] == 0]
one = df2[df2["label"] == 1]
plt.scatter(zero["x0"] , zero["x1"] , label = "0")
plt.scatter(one["x0"] , one["x1"] , label = "1")
plt.show()

X_train,X_test,y_train,y_test=train_test_split(df2.drop(columns=["label"] , axis = 1),df2["label"],test_size=0.20,random_state=42)
clf2 = DecisionTreeClassifier(criterion="entropy" , random_state=42)
fig = plt.figure(figsize=(14,10))
label = 'Decision Tree'
clf2.fit(X_train, y_train)
fig = plot_decision_regions(X=np.array(X_train), y=np.array(pd.Categorical(y_train).codes), clf=clf2, legend=2)
plt.title(label)
plt.xlabel("X0")
plt.ylabel("X1")
plt.show()


dot_graph = tree.export_graphviz(clf2,
                    feature_names = ["X0","X1"],
                    class_names=["0","1"],
                    filled = True)
graph = graphviz.Source(dot_graph , format="png")
graph.render("tree2")

from sklearn.svm import SVC
clf = SVC()
fig = plt.figure(figsize=(14,10))
label = 'SVM'
clf.fit(X_train,y_train)
fig = plot_decision_regions(X=np.array(X_train), y=np.array(pd.Categorical(y_train).codes), clf=clf, legend=2)
plt.title(label)
plt.xlabel("X0")
plt.ylabel("X1")
plt.show()

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier()
fig = plt.figure(figsize=(14,10))
label = 'RandomForest'
clf.fit(X_train,y_train)
fig = plot_decision_regions(X=np.array(X_train), y=np.array(pd.Categorical(y_train).codes), clf=clf, legend=2)
plt.title(label)
plt.xlabel("X0")
plt.ylabel("X1")
plt.show()